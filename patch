Index: debian/freegeek-extras.init
===================================================================
--- debian/freegeek-extras.init	(revision 188)
+++ debian/freegeek-extras.init	(working copy)
@@ -16,9 +16,9 @@
         HNAME=`hostname`
         if [ "$HNAME" != 'freekbox' ]; then
             hostname freekbox
+            cp /etc/hostname /etc/hostname_freekbox
             echo freekbox > /etc/hostname
             sed -i "s/$HNAME/freekbox/g" /etc/hosts
-            touch /etc/hostname_freekbox
         fi
     fi
 }
Index: debian/freegeek-extras.postrm
===================================================================
--- debian/freegeek-extras.postrm	(revision 188)
+++ debian/freegeek-extras.postrm	(working copy)
@@ -1,5 +1,17 @@
 #!/bin/sh
 
 sed -i '/freegeek-extras/d' /etc/cups/cupsd.conf
+sed -i '/freegeek-extras/d' /etc/cups/printers.conf
 
+if [ ! -f /etc/hostname_freekbox ]; then
+    HNAME=`hostname`
+    ORIG="$(cat /etc/hostname_freekbox)"
+    if [ "$HNAME" = 'freekbox' ] && [ ! -z "$ORIG" ]; then
+        hostname "$ORIG"
+        rm /etc/hostname_freekbox
+        echo "$ORIG" > /etc/hostname
+        sed -i "s/$HNAME/$ORIG/g" /etc/hosts
+    fi
+fi
+
 #DEBHELPER#
Index: debian/changelog
===================================================================
--- debian/changelog	(revision 188)
+++ debian/changelog	(working copy)
@@ -1,3 +1,18 @@
+freegeek-extras (1.1.33) UNRELEASED; urgency=low
+
+  * keep the choice number for the actions/types menus the same as
+    the id from the database
+  * figure out the default choice using the 'code's instead of the
+    'description's"
+  * made stress-test simpler
+  * if the server returns bad xml or something that was unexpected
+    then exit nicely
+  * add checking for if the server is incompatible
+  * better cleanup on removal
+  * don't clean the XML
+
+ -- Ryan Niebur <ryanryan52@gmail.com>  Thu, 11 Sep 2008 21:53:39 -0700
+
 freegeek-extras (1.1.32) ubuntu; urgency=low
 
   * updated printme version, to force an upgrade
Index: scripts/stress-test
===================================================================
--- scripts/stress-test	(revision 188)
+++ scripts/stress-test	(working copy)
@@ -1,37 +1,31 @@
 #!/bin/bash
 
 function help {
-echo -e "stress-test - runs a 3 minute stress test"
-echo -e 
-echo -e "usage:"
-echo -e "\t-h, --help    -  displays this message"
-echo -e "\t-v, --verbose -  runs stress in verbose mode"
-echo -e "\t-q, --quiet   -  runs stress in quiet mode, this is the default"
-exit 0
+    echo -e "stress-test - runs a 3 minute stress test"
+    echo -e
+    echo -e "usage:"
+    echo -e "\t-h, --help    -  displays this message"
+    echo -e "\t-v, --verbose -  runs stress in verbose mode"
+    echo -e "\t-q, --quiet   -  runs stress in quiet mode, this is the default"
 }
 
 case "$1" in
-    --verbose)
-    ARG="--verbose"
-    ;;
-    -v)
-    ARG="--verbose"
-    ;;
-    --quiet)
-    ARG="--quiet"
-    ;;
-    -q)
-    ARG="--quiet"
-    ;;
-    -h)
-    help
-    ;;
-    --help)
-    help
-    ;;
+    --verbose|-v)
+        ARG="--verbose"
+        ;;
+    --quiet|-q|"")
+        ARG="--quiet"
+        ;;
+    --help|-h)
+        help
+        exit 0
+        ;;
     *)
-    ARG="--quiet"
-    ;;
+        echo "Unknown option: $1"
+        echo
+        help
+        exit 1
+        ;;
 esac
 
 echo "Running stress test..."
Index: scripts/printme
===================================================================
--- scripts/printme	(revision 188)
+++ scripts/printme	(working copy)
@@ -4,7 +4,8 @@
 f = File.open('/etc/printme.yml')
 yaml = YAML.load(f.read)
 f.close
-if !(yaml.keys == ['server', 'port'] || yaml.keys == ['port', 'server'])
+keys = ['server', 'port']
+if !(yaml.keys - keys == [] && keys - yaml.keys == [])
   puts "Invalid configuration file"
   exit 1
 end
@@ -19,7 +20,7 @@
 $jobs_model = "action"
 
 $COLOR = true #make things cool
-$PRINTME_VERSION=3
+$PRINTME_VERSION=5
 
 begin
   require 'lib/xmlsimple' # installed by debian package, http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=491730
@@ -92,8 +93,10 @@
 
   response = Net::HTTP.get_response(URI.parse(url))
   case response
-  when Net::HTTPSuccess     then response
-  when Net::HTTPRedirection then fetch(response['location'], limit - 1)
+  when Net::HTTPSuccess
+    response
+  when Net::HTTPRedirection
+    fetch(response['location'], limit - 1)
   else
     nil
   end
@@ -106,12 +109,14 @@
     con.read_timeout = TIMEOUT_SECONDS
     begin
       response = con.post(url.path, query, headers)
-        case response
-        when Net::HTTPSuccess     then return response
-        when Net::HTTPRedirection then return fetch(response['location'], limit - 1)
-        else
-          nil
-        end
+      case response
+      when Net::HTTPSuccess
+        return response
+      when Net::HTTPRedirection
+        return fetch(response['location'], limit - 1)
+      else
+        nil
+      end
     rescue => e
       nil
     end
@@ -122,18 +127,8 @@
   if File.exist?("/var/lib/freegeek-extras/printme/lshw.xml")
     mv('/var/lib/freegeek-extras/printme/lshw.xml', '/var/lib/freegeek-extras/printme/lshw.xml.old')
   end
-  $lshwname =  '/var/lib/freegeek-extras/printme/lshw.xml'
+  $lshwname = '/var/lib/freegeek-extras/printme/lshw.xml'
   system("sudo lshw -xml>#{$lshwname}")
-  retval = system("xmlstarlet val #{$lshwname} 1>&2 > /dev/null")
-  if retval != true
-    system("cat #{$lshwname} | tr -dc [:print:] | xmlstarlet fo > #{$lshwname}.clean")
-    mv($lshwname + ".clean", $lshwname)
-    newretval = system("xmlstarlet val #{$lshwname} 1>&2 > /dev/null")
-    if newretval != true
-      errorMessage "The xml file is not valid and I could not fix it!\nAsk a build instructor for help.\n\n"
-      exit 1
-    end
-  end
 end
 
 def do_setup
@@ -190,17 +185,58 @@
   @jobs={}
   @types={}
 
-jobs_xml[$jobs_model].each { |x| @jobs[x["description"][0]] = x["id"][0]["content"].to_i if x.class == Hash }
+  jobs_xml[$jobs_model].each { |x| @jobs[x["description"][0]] = x["id"][0]["content"].to_i if x.class == Hash }
   types_xml[$types_model].each { |x| @types[x["description"][0]] = x["id"][0]["content"].to_i if x.class == Hash }
 
+  @jobs_by_name={}
+  @types_by_name={}
+
+  jobs_xml[$jobs_model].each { |x| @jobs_by_name[x["name"][0]] = x["description"][0] if x.class == Hash }
+  types_xml[$types_model].each { |x| @types_by_name[x["name"][0]] = x["description"][0] if x.class == Hash }
+
+  @jobs_arr = []
+  @types_arr = []
+
+  jobs_xml[$jobs_model].each { |x| @jobs_arr[x["id"][0]["content"].to_i] = x["description"][0] if x.class == Hash }
+  types_xml[$types_model].each { |x| @types_arr[x["id"][0]["content"].to_i] = x["description"][0] if x.class == Hash }
+
   @system_id ||= prompt('If the system had an id on it already, enter that here',
-                                   'Please supply a number or nothing at all') {|num| num.empty? or (num.to_i.to_s == num)}
+                        'Please supply a number or nothing at all') {|num| num.empty? or (num.to_i.to_s == num)}
   system.close if system
 end
 
+#these two are stolen and modified from rubytui
+
+def my__displayMenu( head, ques, *m_items )
+  header head
+  m_items.each_with_index {|item, i|
+    if !item.nil?
+      highlight "\t%d" % i.to_s
+      display ": %s\n" % item
+    end
+  }
+  choice = prompt( ques )
+  return choice.empty? ? nil : choice.to_i
+end
+
+def my_menuWithDefault( head, ques, default, *m_items )
+  choice = my__displayMenu( head, ques + " [#{default}]", *m_items )
+  return default unless choice
+  valid_choices = []
+  m_items.each_with_index{|x,i|
+    valid_choices << i if !x.nil?
+  }
+  until valid_choices.include?( choice )
+    errorMessage "\nPlease enter a valid choice\n\n"
+    choice = my__displayMenu( head, ques + " [#{default}]", *m_items )
+    return default unless choice
+  end
+  return m_items[choice]
+end
+
 def ask_and_send_stuff
-  job = menuWithDefault('Work Tasks', 'Which job did you perform?', "quality checker", *@jobs.keys)
-  type = menuWithDefault('System Type', 'What kind of system is this intended to be?', 'regular', *@types.keys)
+  job = my_menuWithDefault('Work Tasks', 'Which job did you perform?', @jobs_by_name["checker"], *@jobs_arr)
+  type = my_menuWithDefault('System Type', 'What kind of system is this intended to be?', @types_by_name['regular'], *@types_arr)
   uid = prompt('What is your volunteer id?', 'Please enter a number.') {|num| num.to_i.to_s == num}
   notes = prompt('What, if anything, is notable about this system?')
 
@@ -274,15 +310,34 @@
     exit retval
   end
   response = Net::HTTP.get_response(URI.parse("http://#{$server}/#{$reports_controller}s/check_compat?version=#{$PRINTME_VERSION}"))
-  xml = XmlSimple.xml_in(response.body)
-  compat = xml["compat"][0]["content"].to_bool
-  if !compat
+  cli_compat = false
+  ser_compat = false
+  begin
+    xml = XmlSimple.xml_in(response.body)
+  rescue
+    errorMessage "The server returned an invalid response. Seek expert attention." + "\n\n"
+    exit 1
+  end
+  begin
+    cli_compat = xml["cli-compat"][0]["content"].to_bool
+  rescue
+    errorMessage "The server returned an invalid response. It may be incompatible. Seek expert attention." + "\n\n"
+    exit 1
+  end
+  begin
+    ser_compat = xml["ser-compat"][0]["content"].to_bool
+  rescue
+    errorMessage "The server is incompatible. exiting." + "\n\n"
+    exit 1
+  end
+  if !(ser_compat && cli_compat)
     errorMessage xml["message"][0] + "\n\n"
     exit 1
   end
 end
 
 def main
+  check_for_people_who_dont_read_the_instructions
   check_version
   get_id_and_stuff
   run_lshw_and_test_stuff
@@ -300,5 +355,4 @@
   end
 end
 
-check_for_people_who_dont_read_the_instructions
 main
Index: printers.conf
===================================================================
--- printers.conf	(revision 188)
+++ printers.conf	(working copy)
@@ -1,16 +1,16 @@
-# Printer configuration file for CUPS v1.2.2
-# Written by cupsd on 2007-02-24 17:42
-<Printer LaserJet-4>
-Info LaserJet-4
-DeviceURI parallel:/dev/lp0
-State Idle
-StateTime 1172367643
-Accepting Yes
-Shared Yes
-JobSheets none none
-QuotaPeriod 0
-PageLimit 0
-KLimit 0
-OpPolicy default
-ErrorPolicy stop-printer
-</Printer>
+# as rediculous as this (the freegeek-extras comments) seems, it's the easiest solution :P #freegeek-extras
+#    -- Ryan52 #freegeek-extras
+<Printer LaserJet-4> #freegeek-extras
+Info LaserJet-4 #freegeek-extras
+DeviceURI parallel:/dev/lp0 #freegeek-extras
+State Idle #freegeek-extras
+StateTime 1172367643 #freegeek-extras
+Accepting Yes #freegeek-extras
+Shared Yes #freegeek-extras
+JobSheets none none #freegeek-extras
+QuotaPeriod 0 #freegeek-extras
+PageLimit 0 #freegeek-extras
+KLimit 0 #freegeek-extras
+OpPolicy default #freegeek-extras
+ErrorPolicy stop-printer #freegeek-extras
+</Printer> #freegeek-extras
