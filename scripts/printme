#!/usr/bin/ruby

require 'printme'

def run_lshw_and_test_stuff
  lshwname = '/var/lib/freegeek-extras/printme/lshw.xml'
  runit(lshwname)
  lshw = File.open(lshwname, "rb")
  @lshw_output = lshw.read
  lshw.close
end

def make_dirs
  if ! File.exist?('/var/lib/freegeek-extras/')
    system 'sudo mkdir /var/lib/freegeek-extras/'
  end
  if ! FileTest.writeable?('/var/lib/freegeek-extras/')
    system "sudo chown -R #{ENV['USER']}:#{ENV['USER']} /var/lib/freegeek-extras/"
  end
  if ! File.exist?('/var/lib/freegeek-extras/printme')
    mkdir('/var/lib/freegeek-extras/printme/')
  end
end

def get_id_and_stuff
  if File.exist?('/var/lib/freegeek-extras/printme/system_id')
    @old_system_id ||= File.read('/var/lib/freegeek-extras/printme/system_id').strip.to_i
  elsif File.exist?('/var/lib/freegeek-extras/printme/system.xml') # old new printme has been ran
    require 'rexml/document'
    @old_system_id ||= REXML::XPath.match(REXML::Document.new(File.read("/var/lib/freegeek-extras/printme/system.xml")), '/system/id').first.get_text.to_s.to_i
  end

  @actions = @driver.actions
  @contracts = @driver.contracts
  @types = @driver.types
  @coveredness_enabled = @driver.coveredness_enabled

  @old_system_id ||= prompt('If the system had an id on it already, enter that here',
                        'Please supply a number or nothing at all') {|num| num.empty? or (num.to_i.to_s == num)}
end

def get_current_info
  @detected_system_id = @driver.get_system_id(@lshw_output)
  if @detected_system_id
    @default_contract = @driver.contract_label_for_system(@detected_system_id)
    @default_type = @driver.type_description_for_system(@detected_system_id)
    covered = @driver.covered_for_system(@detected_system_id)
    if covered.nil?
      @default_uncovered = nil # TODO: should run @driver.default_uncovered_value, which should be false
    else
      @default_uncovered = !covered
    end
  else
    @default_type = @driver.default_type_description
    @default_contract = @driver.default_contract_label
    @default_uncovered = nil
  end
  @default_action = @driver.default_action_description
end


def show_a_message(first)
  second = "Are you sure that you entered it correctly (HINT: look for the sticker)?"
  puts
  puts colored(first, 'bold', 'green')
  out = prompt second, "Please type yes or no" do |x|
    x.match(/yes/i) || x.match(/no/i)
  end
  return out.match(/yes/i)
end

def show_message
  return show_a_message("You are are changing the contract.")
end

def show_covered_message
  return show_a_message("You are are changing the uncovered electronic device value.")
end

class Array
  def to_my_array(thing)
    arr = []
    self.each{|x|
      arr[x.thing_id] = eval("x.#{thing}")
    }
    arr
  end
end

def ask_contract
  # FIXME: all of this logic needs to be cleaned up
  first_time = @detected_system_id.nil?
  contract = nil
  loop do
    contract = nil
    checkable_contracts = @contracts.to_my_array("label").select{|x| !x.nil?}.select{|x| x != "No Sticker"} # TODO: sort so that the current contract is the first asked question. or the last. not sure how we want to do it.
    for this_contract in checkable_contracts
      if yes_or_no("Does the system have a #{this_contract} sticker? [#{@default_contract == this_contract ? "yes" : "no"}]")
        contract = this_contract
        break
      end
    end
    if contract.nil?
      contract = "No Sticker"
    end
    if contract != @default_contract && !first_time
      if show_message
        break
      end
    else
      break
    end
  end
  return contract
end

def ask_covered
  covered = nil
  if @coveredness_enabled
    return false if @contract.to_i != 1 # FIXME: this logic needs to be elsewhere
    loop do
      covered = !yes_or_no("Does the system have an uncovered electronic device sticker?#{(!@default_uncovered.nil?) ? " [#{@default_uncovered ? "yes" : "no"}]" : ""}")
      if covered != (!@default_uncovered) && !@default_uncovered.nil?
        if show_covered_message
          break
        end
      else
        break
      end
    end
  end
  return covered
end

def ask_and_send_stuff
  action = numberedMenuWithDefault('Work Tasks', 'Which job did you perform?', @default_action, @actions.to_my_array("description"))
  type = numberedMenuWithDefault('System Type', 'What kind of system is this intended to be?', @default_type, @types.to_my_array("description"))
  contract = ask_contract
  @contract = @contracts.select{|x| x.label == contract}.first.thing_id
  covered = ask_covered
  uid = prompt('What is your volunteer id?', 'Please enter a number.') {|num| num.to_i.to_s == num}
  notes = prompt('What, if anything, is notable about this system?')
  codename = `lsb_release --description --short`

  data = {
    "contact_id" => uid,
    "action_id" => @actions.select{|x| x.description == action}.first.thing_id,
    "type_id" => @types.select{|x| x.description == type}.first.thing_id,
    "contract_id" => @contract,
    "old_id" => @old_system_id,
    "notes" => notes,
    "lshw_output" => @lshw_output,
    "os" => codename,
    "covered" => covered,
  }

  data_struct = @driver.empty_struct
  data.each{|k,v|
    eval("data_struct.#{k} = v")
  }

  @report_id = @driver.submit(data_struct)
  system_id=@driver.get_system_for_report(@report_id)
  if system_id != @old_system_id
    @old_system_id = system_id
  end

  system=File.open('/var/lib/freegeek-extras/printme/system_id', 'w')
  system.puts(@old_system_id)
  system.close
  Dir.glob("/var/lib/freegeek-extras/printme/{system,report.*,spec_sheet.*}.xml").each{|x| rm x} # remove teh cruft
end

def printer_there?(printer)
  `lpstat -p`.split("\n").map{|x| x.split(" ")[1]}.include?(printer)
end

def printer_setup
  printer = ARGV[1]
  system('sudo su - -c "echo \"Browsing Yes #freegeek-extras\" >> /etc/cups/cupsd.conf"')
  if File.exists?("/etc/init.d/cups")
    system('sudo /etc/init.d/cups restart >/dev/null')
  elsif File.exists?("/etc/init.d/cupsys")
    system('sudo /etc/init.d/cupsys restart >/dev/null')
  else
    errorMessage "ERROR: Can't figure out how to restart cups\n\n"
    exit 1
  end
  num = 0
  found=false
  if printer.nil? || printer.empty?
    errorMessage "the #{ARGV[0]} option required an option (the printer's name)" + "\n"
    exit 1
  end
  # in my tests it took about 27 seconds for cups to figure it out
  while num < 10
    num += 1
    printf "looking for printer #{printer}..."
    if printer_there?(printer)
      found=true
      puts "found it"
      break
    else
      found=false
      printf "not found "
      if num < 10
        sleep 5
        puts "(will try again in a few seconds)"
      else
        puts "(giving up)"
      end
    end
  end
  puts
  if !found
    errorMessage "Please specify a valid printer." + "\n\n"
    exit 1
  end
  system("sudo su - -c \"echo \\\"Default #{printer} #freegeek-extras\\\" >> /etc/cups/lpoptions\"")
end

def mymain
  if ARGV[0] == "-p" || ARGV[0] == "--printer"
    printer_setup
  end
  if ARGV[0] == "-h" || ARGV[0] == "--help"
    system("man 1 printme | cat -")
    exit 0
  end
  color "Making directories"
  make_dirs
  color "Running lshw..."
  run_lshw_and_test_stuff
  color "Getting information about this system's past..."
  get_current_info
  color "Asking questions and submitting to server..."
  get_id_and_stuff
  ask_and_send_stuff
  look_at_url @driver.spec_sheet_url(@report_id)
end

main
