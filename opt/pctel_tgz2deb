#!/usr/bin/perl
# convert a PCTel driver tarball into a .deb file
# designed and tested for Debian Sarge; will probably need maintenance for future releases
# jet August 2005

use File::Temp qw(tempfile tempdir);
use File::Basename;

use strict;

if (($#ARGV < 0) || ($#ARGV > 1)) {
    print STDERR "usage: pctel_tgz2deb pctel-whatever.tar.gz [pctel-filename.deb]\n";
    exit 1;
}

my $pct_tgz_ver;

if ($ARGV[0] !~ /pctel-(\S+).tar.gz$/) {
    print STDERR "PCTel tarball name is not in normal format, cannot parse\n";
    exit 1;
}
else {
    $pct_tgz_ver = $1;
}

my $build_kver = `uname -r`;
chomp $build_kver;

my $deb_fn;

if ($#ARGV == 1) {
    $deb_fn = $ARGV[1];
}
else {
    $deb_fn = "pctel-${build_kver}_${pct_tgz_ver}.deb";
}

print "transforming $ARGV[0] into $deb_fn\n";

# acquire a temporary directory to do the work in
my $tmpdir = tempdir( CLEANUP => 1);

# unpack the tgz into (a subdir of) the temp dir
my $tarcmd = "tar -C $tmpdir -xzf $ARGV[0]";
system($tarcmd);

my $retcode = $?;
if ($retcode != 0) {
    print STDERR "untar command $tarcmd failed with exit code $retcode.  try again manually to debug.\n";
    exit 1;
}

# go there and run the module build process
my $pctel_dir = substr(basename($ARGV[0]), 0, -7);  # remove .tar.gz

# run the configure step
system("cd ${tmpdir}/${pctel_dir}/src;./configure -auto");

$retcode = $?;
if ($retcode != 0) {
    print STDERR "configure process failed with exit code $retcode.  try again manually to debug.\n";
    exit 1;
}

# build the ko files
system("cd ${tmpdir}/${pctel_dir}/src;make");
$retcode = $?;
if ($retcode != 0) {
    print STDERR "make process failed with exit code $retcode.  try again manually to debug.\n";
    exit 1;
}

# start building the directory that will become the debian package
my $pct_deb_dir = "${tmpdir}/pctel-${build_kver}_${pct_tgz_ver}";
mkdir("${pct_deb_dir}");

# control subdirectory
mkdir("${pct_deb_dir}/DEBIAN");
open(my $ctl_fh, ">", "${pct_deb_dir}/DEBIAN/control");
print $ctl_fh "Package: pctel-${build_kver}\n";
print $ctl_fh "Version: ${pct_tgz_ver}\n";
print $ctl_fh "Section: admin\n";
print $ctl_fh "Priority: optional\n";
print $ctl_fh "Architecture: i386\n";
print $ctl_fh "Depends: linux-image-${build_kver}\n";
print $ctl_fh "Description: Half open source driver for PCTel HSP softmodems\n";
my @pwent = getpwuid($>);
my $username = (split(',', $pwent[6]))[0];
my $host = `hostname`;
chomp($host);
printf $ctl_fh "Maintainer: %s@%s (%s)\n", $pwent[0], $host, $username;
$ctl_fh->close();

# the docs
mkdir("${pct_deb_dir}/usr");
mkdir("${pct_deb_dir}/usr/share");
mkdir("${pct_deb_dir}/usr/share/doc");
mkdir("${pct_deb_dir}/usr/share/doc/pctel-${build_kver}");
system("cp ${tmpdir}/${pctel_dir}/FAQ ${pct_deb_dir}/usr/share/doc/pctel-${build_kver}");
system("cp ${tmpdir}/${pctel_dir}/README ${pct_deb_dir}/usr/share/doc/pctel-${build_kver}");

# kernel objects
mkdir("${pct_deb_dir}/lib");
mkdir("${pct_deb_dir}/lib/modules");
mkdir("${pct_deb_dir}/lib/modules/${build_kver}");
mkdir("${pct_deb_dir}/lib/modules/${build_kver}/extra");
system("cp ${tmpdir}/${pctel_dir}/src/*.ko ${pct_deb_dir}/lib/modules/${build_kver}/extra");

# udev setup so we get /dev/modem symlink at boot
mkdir("${pct_deb_dir}/etc");
mkdir("${pct_deb_dir}/etc/udev");
open(my $udrules, ">", "${pct_deb_dir}/etc/udev/pctel.rules");
print $udrules "KERNEL=\"ttyS_PCTEL0\", NAME=\"%k\", MODE=\"0660\", GROUP=\"dialout\", SYMLINK=\"modem\"\n";
$udrules->close();
mkdir("${pct_deb_dir}/etc/udev/rules.d");
system("cd ${pct_deb_dir}/etc/udev/rules.d;ln -s ../pctel.rules .");

# create control scripts from inline info in this script
open (my $preinst, ">", "${pct_deb_dir}/DEBIAN/preinst");
print $preinst <<'END_PREINST';
#!/usr/bin/perl
# figure out if a supported PCTel modem is in this box
# exit code 2 indicates unsupported PCTel modem
# exit code 0 indicates supported PCTel modem found and installed
# exit code 1 for all other cases

my @lspci_lines = `lspci -n -d134d:`;
# a good line looks like this:
# 0000:00:06.0 0780: 134d:7890 (rev 01)
# we support 7890-7897

my $found = 0;
my $found_unsupported = 0;

foreach (@lspci_lines) {
    if (/[0-9:.]\s+[0-9:]+\s+(134d:789[0-7])/) {
	print "found supported PCTel softmodem:\n";
	system("lspci -d$1");
	$found++;
    }
    else {
	print "found an unsupported PCTel modem:\n";
	print;
	$found_unsupported++;
    }
}

if (!$found && $found_unsupported) {
    print STDERR "found an unsupported PCTel modem;  aborting\n";
    exit 2;
}
elsif (!$found) {
    print STDERR "no supported PCTel modems found; aborting\n";
    exit 1;
}
elsif ($found > 1) {
    print STDERR "more than one supported PCTel modem found; this may not work\n";
}

exit 0;

END_PREINST

$preinst->close();
system("chmod a+x ${pct_deb_dir}/DEBIAN/preinst");
system("chmod a-w ${pct_deb_dir}/DEBIAN/preinst");

open (my $postinst, ">", "${pct_deb_dir}/DEBIAN/postinst");
print $postinst <<'END_POSTINST';
#!/bin/bash

## depmod to update the module db with new .ko files dpkg copied
/sbin/depmod -a

# do the modprobes to get them initially running
modprobe pctel

# update the module load files so we get this every boot
echo "pctel" >> /etc/modules

END_POSTINST

$postinst->close();
system("chmod a+x ${pct_deb_dir}/DEBIAN/postinst");
system("chmod a-w ${pct_deb_dir}/DEBIAN/postinst");

open (my $postrm, ">", "${pct_deb_dir}/DEBIAN/postrm");
print $postrm <<'END_POSTRM';
#!/bin/bash
## remove pctel line from /etc/modules
sed -i '/pctel/d' /etc/modules

## unload modules
rmmod pctel;rmmod pctel_hw;rmmod linmodem

## update dependency table
depmod -a

END_POSTRM

$postrm->close();
system("chmod a+x ${pct_deb_dir}/DEBIAN/postrm");
system("chmod a-w ${pct_deb_dir}/DEBIAN/postrm");

# run dpkg command to create the final deb
system("dpkg -b ${pct_deb_dir} $deb_fn\n");

$retcode = $?;
if ($retcode != 0) {
    print STDERR "final dpkg run failed with code $retcode!\n";
    exit $retcode;
}

0;
